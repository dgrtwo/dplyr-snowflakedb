% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/src-snowflakedb.R
\name{src_snowflakedb}
\alias{src_snowflakedb}
\alias{tbl.src_snowflakedb}
\title{Initialize a Snowflake database}
\usage{
src_snowflakedb(
  user = NULL,
  password = NULL,
  account = NULL,
  port = 443,
  host = NULL,
  opts = list(),
  region_id = "us-west",
  verbose = FALSE,
  ...
)

\method{tbl}{src_snowflakedb}(src, from, ...)
}
\arguments{
\item{user}{Username}

\item{password}{Password}

\item{account}{Account Name (e.g. <account>.snowflakecomputing.com)}

\item{port}{Port (Defaults to 443, the default for public endpoints)}

\item{host}{Hostname (Not required for public endpoints, defaults to
<account>.snowflakecomputing.com)}

\item{opts}{List of other parameters to pass (warehouse, db, schema, tracing)}

\item{region_id}{Specifies the ID for the Snowflake Region where your account 
is located. (Default: us-west, example: us-east-1). 
See: \url{https://docs.snowflake.net/manuals/user-guide/intro-editions.html#region-ids-in-account-urls}}

\item{verbose}{Whether to display messages useful in debugging.}

\item{...}{for the src, other arguments passed on to the underlying
database connector, \code{dbConnect}. For the tbl, included for
compatibility with the generic, but otherwise ignored.}

\item{src}{a snowflakedb src created with \code{src_snowflakedb}.}

\item{from}{Either a string giving the name of table in database, or
\code{\link{sql}} described a derived table or compound join.}
}
\description{
Initialize a Snowflake database
}
\section{Debugging}{


To see exactly what SQL is being sent to the database, you see
\code{\link{show_query}} and \code{\link{explain}}.
}

\section{Grouping}{


Typically you will create a grouped data table is to call the \code{group_by}
method on a mysql tbl: this will take care of capturing
the unevalated expressions for you.
}

\section{Output}{


All data manipulation on SQL tbls are lazy: they will not actually
run the query or retrieve the data unless you ask for it: they all return
a new \code{\link{tbl_sql}} object. Use \code{\link{compute}} to run the
query and save the results in a temporary in the database, or use
\code{\link{collect}} to retrieve the results to R.

Note that \code{do} is not lazy since it must pull the data into R.
It returns a \code{\link{tbl_df}} or \code{\link{grouped_df}}, with one
column for each grouping variable, and one list column that contains the
results of the operation. \code{do} never simplifies its output.
}

\section{Query principles}{


This section attempts to lay out the principles governing the generation
of SQL queries from the manipulation verbs.  The basic principle is that
a sequence of operations should return the same value (modulo class)
regardless of where the data is stored.

\itemize{
 \item \code{arrange(arrange(df, x), y)} should be equivalent to
   \code{arrange(df, y, x)}

 \item \code{select(select(df, a:x), n:o)} should be equivalent to
   \code{select(df, n:o)}

 \item \code{mutate(mutate(df, x2 = x * 2), y2 = y * 2)} should be
    equivalent to \code{mutate(df, x2 = x * 2, y2 = y * 2)}

 \item \code{filter(filter(df, x == 1), y == 2)} should be
    equivalent to \code{filter(df, x == 1, y == 2)}

 \item \code{summarise} should return the summarised output with
   one level of grouping peeled off.
}
}

\examples{
\dontrun{
# Connection basics ---------------------------------------------------------
# To connect to a database first create a src:
my_db <- src_snowflakedb(user = "snowman",
                         password = "letitsnow",
                         account = "acme",
                         opts = list(warehouse = "mywh",
                                     db = "mydb",
                                     schema = "public")
# Then reference a tbl within that src
my_tbl <- tbl(my_db, "my_table")
}

\donttest{
# Here we'll use the Lahman database: to create your own in-database copy,
# create a database called "lahman", or tell lahman_snowflakedb() how to
# connect to a database that you can write to

#if (has_lahman("snowflakedb", account = "acme",
#               user = "snowman", password = "letitsnow",
#               opts=list(warehouse="wh", db="lahman", schema="public"))) {
lahman_p <- lahman_snowflakedb()
# Methods -------------------------------------------------------------------
batting <- tbl(lahman_p, "Batting")
dim(batting)
colnames(batting)
head(batting)

# Data manipulation verbs ---------------------------------------------------
filter(batting, yearID > 2005, G > 130)
select(batting, playerID:lgID)
arrange(batting, playerID, desc(yearID))
summarise(batting, G = mean(G), n = n())
mutate(batting, rbi2 = if(is.null(AB)) 1.0 * R / AB else 0)

# note that all operations are lazy: they don't do anything until you
# request the data, either by `print()`ing it (which shows the first ten
# rows), by looking at the `head()`, or `collect()` the results locally.

system.time(recent <- filter(batting, yearID > 2010))
system.time(collect(recent))

# Group by operations -------------------------------------------------------
# To perform operations by group, create a grouped object with group_by
players <- group_by(batting, playerID)
group_size(players)

summarise(players, mean_g = mean(G), best_ab = max(AB))
best_year <- filter(players, AB == max(AB) | G == max(G))
progress <- mutate(players,
  cyear = yearID - min(yearID) + 1,
  ab_rank = rank(desc(AB)),
  cumulative_ab = order_by(yearID, cumsum(AB)))

# When you group by multiple level, each summarise peels off one level
per_year <- group_by(batting, playerID, yearID)
stints <- summarise(per_year, stints = max(stint))
filter(stints, stints > 3)
summarise(stints, max(stints))
# mutate(stints, order_by(yearID, cumsum(stints)))

# Joins ---------------------------------------------------------------------
player_info <- select(tbl(lahman_p, "Master"), playerID, birthYear)
hof <- select(filter(tbl(lahman_p, "HallOfFame"), inducted == "Y"),
 playerID, votedBy, category)

# Match players and their hall of fame data
inner_join(player_info, hof)
# Keep all players, match hof data where available
left_join(player_info, hof)
# Find only players in hof
semi_join(player_info, hof)
# Find players not in hof
anti_join(player_info, hof)

# Arbitrary SQL -------------------------------------------------------------
# You can also provide sql as is, using the sql function:
batting2008 <- tbl(lahman_p,
  sql('SELECT * FROM "Batting" WHERE "yearID" = 2008'))
batting2008
#}
}
}
